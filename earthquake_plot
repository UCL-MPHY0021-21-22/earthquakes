# The Python standard library includes some functionality for communicating
# over the Internet.
# However, we will use a more powerful and simpler library called requests.
# This is external library that you may need to install first.
import requests
import json
from datetime import date
import matplotlib.pyplot as plt
import numpy as np

def get_data():
    # With requests, we can ask the web service for the data.
    # Can you understand the parameters we are passing here?
    response = requests.get(
        "http://earthquake.usgs.gov/fdsnws/event/1/query.geojson",
        params={
            'starttime': "2000-01-01",
            "maxlatitude": "58.723",
            "minlatitude": "50.008",
            "maxlongitude": "1.67",
            "minlongitude": "-9.756",
            "minmagnitude": "1",
            "endtime": "2018-10-11",
            "orderby": "time-asc"}
    )

    # The response we get back is an object with several fields.
    # The actual contents we care about are in its text field:
    text = response.text
    # To understand the structure of this text, you may want to save it
    # to a file and open it in VS Code or a browser.
    # See the README file for more information.
    textData = json.loads(text)

    with open('earthquake_data.json','w') as DataFile:
        DataFile.write(json.dumps(textData))

    # We need to interpret the text to get values that we can work with.
    # What format is the text in? How can we load the values?
    return textData

def count_earthquakes(data):
    """Get the total number of earthquakes in the response."""
    return data['metadata']['count']


def get_magnitude(earthquake):
    """Retrive the magnitude of an earthquake item."""
    return earthquake['properties']['mag']

def get_location(earthquake):
    """Retrieve the latitude and longitude of an earthquake item."""
    # There are three coordinates, but we don't care about the third (altitude)
    return earthquake['geometry']['coordinates'][:-1]


def get_maximum(data):
    """Get the magnitude and location of the strongest earthquake in the data."""
    max_earthquake = data['features'][0]
    for earthquake in data['features']:
        if (get_magnitude(earthquake) > get_magnitude(max_earthquake)):
            max_earthquake = earthquake
    return  get_magnitude(max_earthquake),get_location(max_earthquake)

def get_year(earthquake):
    """Extract the year in which an earthquake happened."""
    timestamp = earthquake['properties']['time']
    # The time is given in a strange-looking but commonly-used format.
    # To understand it, we can look at the documentation of the source data:
    # https://earthquake.usgs.gov/data/comcat/index.php#time
    # Fortunately, Python provides a way of interpreting this timestamp:
    # (Question for discussion: Why do we divide by 1000?)
    year = date.fromtimestamp(timestamp/1000).year
    return year

# This is function you may want to create to break down the computations,
# although it is not necessary. You may also change it to something different.
def get_magnitudes_per_year(earthquakes):
    """Retrieve the magnitudes of all the earthquakes in a given year.
    
    Returns a dictionary with years as keys, and lists of magnitudes as values.
    """
    yearDict ={}
    for earthquake in earthquakes['features']:
        year = get_year(earthquake)
        if year not in yearDict:
            yearDict[year]=[]
        yearDict[year].append(get_magnitude(earthquake))
    return yearDict

def plot_average_magnitude_per_year(earthquakes):
    yearDict = get_magnitudes_per_year(earthquakes)
    x_year = []
    y_mag_average = []
    for year in yearDict:
        npMagList = np.array(yearDict[year])
        mag_average = np.mean(npMagList)
        x_year.append(year)
        y_mag_average.append(mag_average)
    
    fig, ax = plt.subplots()
    ax.plot(x_year,y_mag_average) #label="Average Magnitude"
    plt.xlabel("Year")
    plt.ylabel("Average magnitude")
    plt.title("Average magnitude of earthquakes per year")
    plt.show()
    #plt.legend()

  
def plot_number_per_year(earthquakes):
    ...
    mag_per_year = get_magnitudes_per_year(earthquakes)
    list_year = mag_per_year.keys()
    list_number = [len(mags) for mags in mag_per_year.values()]
    plt.bar(list_year, list_number)
    plt.xlabel("Year")
    plt.ylabel("Number")
    plt.title("Number of earthquakes per year")
    plt.show()

# Get the data we will work with
data = get_data()

# Plot the results - this is not perfect since the x axis is shown as real
# numbers rather than integers, which is what we would prefer!
plot_number_per_year(data)

#plt.clf()  # This clears the figure, so that we don't overlay the two plots

plot_average_magnitude_per_year(data)